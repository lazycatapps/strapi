# app 的唯一 id,上架到商店需要保证不要冲突,尽量使用开发者自己的域名作为后缀.
package: cloud.lazycat.app.liu.strapi
# app 的版本
version: 5.25.0

name: Strapi
keyword: strapi,cms,headless
description: Strapi 是一个开源的无头内容管理系统 (Headless CMS)

# 软件名称,会显示在启动器之类的地方
locales:
  zh:
    name: Strapi CMS
    description: |
      ## Strapi - 开源无头内容管理系统

      Strapi 官方网站：https://strapi.io/

      Strapi 是一个领先的开源无头内容管理系统（Headless CMS），它完全基于 JavaScript/TypeScript 构建，为开发者提供了灵活的 API 优先的内容管理解决方案。

      ## 主要功能

      - 🚀 快速构建 RESTful API 和 GraphQL API
      - 📝 可视化内容类型构建器，无需编码即可创建数据模型
      - 🎨 直观的管理面板，方便内容编辑和管理
      - 🔐 内置用户权限和角色管理系统
      - 🔌 丰富的插件生态系统，可扩展功能
      - 📱 支持多语言内容管理
      - 🖼️ 媒体库管理，支持图片、视频等多种文件类型
      - 🌐 支持自定义字段和关联关系
      - 🔄 支持 Webhook 和自动化工作流
      - 💻 基于 Node.js，支持自托管部署

      ## 使用场景

      - 网站和应用程序的后端 API 开发
      - 移动应用的内容管理后台
      - 电商平台的产品管理系统
      - 博客和文档网站的内容管理
      - 多端内容分发平台

      ## 使用方法

      1. 启动应用后，访问管理面板
      2. 首次使用需要创建管理员账号
      3. 使用内容类型构建器创建数据模型
      4. 在内容管理器中添加和编辑内容
      5. 通过 API 访问和使用内容数据

      ## 技术栈

      - 后端框架：Koa.js
      - 数据库：PostgreSQL
      - 前端：React
      - 开发语言：JavaScript/TypeScript

  en:
    name: Strapi CMS
    description: |
      ## Strapi - Open Source Headless CMS

      Strapi official website: https://strapi.io/

      Strapi is a leading open-source headless content management system (CMS), built entirely on JavaScript/TypeScript, providing developers with a flexible API-first content management solution.

      ## Main Features

      - 🚀 Quickly build RESTful APIs and GraphQL APIs
      - 📝 Visual content type builder, create data models without coding
      - 🎨 Intuitive admin panel for easy content editing and management
      - 🔐 Built-in user permissions and role management system
      - 🔌 Rich plugin ecosystem for extended functionality
      - 📱 Multi-language content management support
      - 🖼️ Media library management, supporting images, videos and more
      - 🌐 Support for custom fields and relationships
      - 🔄 Webhook and automation workflow support
      - 💻 Built on Node.js, supports self-hosted deployment

      ## Use Cases

      - Backend API development for websites and applications
      - Content management backend for mobile apps
      - Product management system for e-commerce platforms
      - Content management for blogs and documentation sites
      - Multi-platform content distribution

      ## How to Use

      1. After launching the app, access the admin panel
      2. First-time use requires creating an admin account
      3. Use the content type builder to create data models
      4. Add and edit content in the content manager
      5. Access and use content data through the API

      ## Tech Stack

      - Backend Framework: Koa.js
      - Database: PostgreSQL
      - Frontend: React
      - Programming Language: JavaScript/TypeScript

# 软件本身的 license
license: https://github.com/strapi/strapi/blob/main/LICENSE

# 软件的主页,会在商店等地方体现
homepage: https://github.com/strapi/strapi

# lpk 的作者,会在商店等地方体现
author: liu

# application 作为一个特殊的 container 运行，对应的 service 名称为固定的`app`， 其他 service 可以通过此名称与 app 进行通讯
application:
  #是否存在后台任务， 若存在则系统不会对此 app 进行主动休眠等操作
  background_task: true

  # 期望的 app 域名，如果系统中已经有对应域名则会提示用户选择其他域名。 最终 app 分配到的域名以/lzcapp/run/app.subdomain 为准
  subdomain: strapi

  routes:
    - /=http://strapi:1337/

  depends_on:
    - strapi

  # 是否启用多实例
  multi_instance: false

services:
  strapi:
    image: ##IMAGE_PLACEHOLDER##
    # image: docker-registry-ui.${LAZYCAT_BOX_NAME}.heiyu.space/strapi:latest
    setup_script: |
      set -e  # Exit immediately if a command exits with a non-zero status
      set -u  # Treat unset variables as an error

      CURRENT_VERSION="5.25.0"
      VERSION_FILE="/backups/.strapi_version"

      # Read installed version
      INSTALLED_VERSION=""
      if [ -f "$VERSION_FILE" ]; then
        INSTALLED_VERSION=$(cat "$VERSION_FILE")
        echo "Installed version: $INSTALLED_VERSION"
      fi

      # Detect if this is a new installation or upgrade
      IS_UPGRADE=false
      if [ -n "$INSTALLED_VERSION" ] && [ "$INSTALLED_VERSION" != "$CURRENT_VERSION" ]; then
        IS_UPGRADE=true
        echo "Upgrading from version $INSTALLED_VERSION to $CURRENT_VERSION"
      fi

      # Handle config files
      if [ "$IS_UPGRADE" = true ]; then
        # Backup entire config directory
        BACKUP_DIR="/backups/v$INSTALLED_VERSION"
        mkdir -p "$BACKUP_DIR"
        echo "Upgrading: Backing up to $BACKUP_DIR..."

        # Backup config files
        if [ -d "/app/config" ]; then
          cp -r /app/config "$BACKUP_DIR/"
          echo "  - Config files backed up"
        fi

        # Backup src files
        if [ -d "/app/src" ]; then
          cp -r /app/src "$BACKUP_DIR/"
          echo "  - Source files backed up"
        fi

        echo "Backup complete! Old files backed up at: $BACKUP_DIR"
      fi

      # initialize config and src if they do not exist
      cp -r /init/config/* /app/config/
      cp /init/src/index.js /app/src/

      if [ ! -d /app/src/admin ]; then
        cp -r /init/src/admin /app/src/
      fi

      # Initialize api folder only once (preserve all user-created and modified content types)
      if [ ! -d /app/src/api ]; then
        cp -r /init/src/api /app/src/
      fi

      if [ ! -d /app/src/components ] && [ -d /init/src/components ]; then
        cp -r /init/src/components /app/src/
      fi

      # Save current version
      echo "$CURRENT_VERSION" > "$VERSION_FILE"
    environment:
      - DATABASE_CLIENT=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=strapi
      - DATABASE_USERNAME=strapi
      - DATABASE_PASSWORD=strapi
      - DATABASE_SSL=false
      - JWT_SECRET=5a7d3c8e9f2b1a4c6d8e0f1a2b3c4d5e
      - ADMIN_JWT_SECRET=9f8e7d6c5b4a3d2c1e0f9a8b7c6d5e4f
      - APP_KEYS=app1key123456,app2key789012,app3keyabcdef,app4keyghijkl
      - API_TOKEN_SALT=a1b2c3d4e5f6g7h8i9j0
      - TRANSFER_TOKEN_SALT=z9y8x7w6v5u4t3s2r1q0
      - ENCRYPTION_KEY=e8f3a2b1c9d7e6f5a4b3c2d1e0f9a8b7c6d5e4f3a2b1c0
      - HOST=0.0.0.0
      - PORT=1337
      - NODE_ENV=development
      - __VITE_ADDITIONAL_SERVER_ALLOWED_HOSTS=strapi,localhost
    depends_on:
      - postgres
    binds:
      - /lzcapp/var/uploads:/app/public/uploads
      - /lzcapp/var/src:/app/src
      - /lzcapp/var/config:/app/config
      - /lzcapp/var/backups:/backups

  postgres:
    image: registry.lazycat.cloud/liu/library/postgres:120a228424c55ea8
    environment:
      - POSTGRES_DB=strapi
      - POSTGRES_USER=strapi
      - POSTGRES_PASSWORD=strapi
    binds:
      - /lzcapp/var/data:/var/lib/postgresql/data
    health_check:
      test:
        - CMD-SHELL
        - pg_isready -U strapi -d strapi
      start_period: 30s
